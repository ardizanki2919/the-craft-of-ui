import { promises as fs } from "node:fs"
import path from "node:path"
import matter from "gray-matter"
import { randomUUID } from "node:crypto"

const top = ["/getting-started"]

const deslugify = (slug) => {
  return slug
    .replace(/[-_]/g, " ") // Replace hyphens/underscores with spaces
    .replace(/\b\w/g, (char) => char.toUpperCase()) // Capitalize first letter of each word
}

const sortByOrderThenName = (a, b) => {
  const orderA =
    a.order !== undefined
      ? Number.parseInt(a.order, 10)
      : Number.MAX_SAFE_INTEGER
  const orderB =
    b.order !== undefined
      ? Number.parseInt(b.order, 10)
      : Number.MAX_SAFE_INTEGER
  if (orderA !== orderB) return orderA - orderB
  const nameA = a.name?.toUpperCase() ?? ""
  const nameB = b.name?.toUpperCase() ?? ""
  return nameA.localeCompare(nameB)
}

const tidy = (structure) => {
  if (structure.leaves.length > 0) {
    structure.leaves = structure.leaves
      .map(tidy)
      .sort(sortByOrderThenName)
      .map((obj) => {
        const newObj = { ...obj }
        newObj.order = undefined
        return newObj
      })
  } else {
    structure.leaves = undefined
  }

  if (top.indexOf(structure.href) !== -1)
    structure.top = top.indexOf(structure.href)

  if (structure.id.trim() === "") structure.id = undefined
  if (structure.href?.trim() === "") structure.href = undefined

  // directory won't have a name if it doesn't have a title
  if (!structure.name)
    structure.name = deslugify(
      structure.path.substr(structure.path.lastIndexOf("/") + 1),
    )
  structure.path = undefined
  return structure
}

const findContent = async (directory, contentObject) => {
  const files = await fs.readdir(directory, { withFileTypes: true })
  const findPromises = files.map(async (file) => {
    const dir = path.join(directory, file.name)
    const route = dir
      .replace(`${process.cwd()}/src/pages`, "")
      .replace("/page.mdx", "")
    if (file.isDirectory()) {
      const leaf = {
        id: randomUUID(),
        path: route,
        leaves: [],
      }
      contentObject.leaves.push(leaf)
      await findContent(dir, leaf)
    } else if (file.name === "page.mdx") {
      try {
        const fileContent = await fs.readFile(dir, "utf-8")
        const meta = matter(fileContent)
        contentObject.name = meta.data.navTitle || meta.data.title || file.name
        contentObject.id = randomUUID()
        contentObject.href = route
        contentObject.order = meta.data.order
      } catch (error) {
        console.warn("this file caused an issue:", dir)
      }
    }
  })
  await Promise.all(findPromises)
}

const getContent = async () => {
  const contentRoot = `${process.cwd()}/src/pages/`
  const content = {
    leaves: [],
  }
  await findContent(contentRoot, content)
  return tidy(content)
}

const content = await getContent()
// insert special cases here
content.leaves.push({
  name: "Newsletter",
  href: "https://craftofui.substack.com/subscribe",
  topLevel: 2,
  id: randomUUID(),
})

const sidebarConfig = `
  /* THIS FILE IS AUTOGENERATED */
  export const config = ${JSON.stringify(content, undefined, 2)};
`
fs.writeFile(`${process.cwd()}/src/components/sidebar-config.js`, sidebarConfig)
